///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace LaunchFSW
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Simulate recording.
    /// </summary>
    [TestModule("3a6e0eaf-abf8-42cc-8090-b192855b376b", ModuleType.Recording, 1)]
    public partial class Simulate : ITestModule
    {
        /// <summary>
        /// Holds an instance of the LaunchFSWRepository repository.
        /// </summary>
        public static LaunchFSWRepository repo = LaunchFSWRepository.Instance;

        static Simulate instance = new Simulate();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Simulate()
        {
            Device_Name = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Simulate Instance
        {
            get { return instance; }
        }

#region Variables

        string _Device_Name;

        /// <summary>
        /// Gets or sets the value of variable Device_Name.
        /// </summary>
        [TestVariable("e5709639-2dc7-4c86-b0be-730f40f61a7e")]
        public string Device_Name
        {
            get { return _Device_Name; }
            set { _Device_Name = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SmartLauncher.PARTEditor' at Center.", repo.SmartLauncher.PARTEditorInfo, new RecordItemIndex(0));
            repo.SmartLauncher.PARTEditor.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(1));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Device_Name'.", new RecordItemIndex(2));
            Keyboard.Press(Device_Name);
            Delay.Milliseconds(20);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 300ms.", new RecordItemIndex(3));
            Delay.Duration(300, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down}' with focus on 'SmartLauncher'.", repo.SmartLauncher.SelfInfo, new RecordItemIndex(4));
            repo.SmartLauncher.Self.EnsureVisible();
            Keyboard.Press("{Down}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 300ms.", new RecordItemIndex(5));
            Delay.Duration(300, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Enter}' with focus on 'SmartLauncher'.", repo.SmartLauncher.SelfInfo, new RecordItemIndex(6));
            repo.SmartLauncher.Self.EnsureVisible();
            Keyboard.Press("{Enter}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 300ms.", new RecordItemIndex(7));
            Delay.Duration(300, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SmartLauncher.SmartLauncherAutomationIdsSimulateActio' at Center.", repo.SmartLauncher.SmartLauncherAutomationIdsSimulateActioInfo, new RecordItemIndex(8));
            repo.SmartLauncher.SmartLauncherAutomationIdsSimulateActio.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'Smart_window.Text2'", repo.Smart_window.Text2Info, new RecordItemIndex(9));
            repo.Smart_window.Text2Info.WaitForAttributeEqual(10000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Smart_window.StateMachineAutomationIdsContinueAction' at Center.", repo.Smart_window.StateMachineAutomationIdsContinueActionInfo, new RecordItemIndex(10));
            repo.Smart_window.StateMachineAutomationIdsContinueAction.Click();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
